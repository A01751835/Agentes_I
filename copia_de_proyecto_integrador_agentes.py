# -*- coding: utf-8 -*-
"""Copia de Proyecto_integrador_agentes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UF6nuvFTBSF-x9Vl29TpyCGBxZ6z1d_E
"""

import numpy as np
import random as rd
import copy
import math

class Terreno:
    def __init__(self, columnas, filas, p_agua, p_obs):
        '''
        Crea el terreno con un mapa del mismo, con el número de columnas y filas solicitado,
        con probabilidad p_agua de que haya agua en el nivel más bajo de terreno y
        p_obs de que salga un obstáculo en cualquier coordenada.
        La profundidad se mide del 1 al 6, siendo el 6 el nivel más profundo.
        El agua se representa con el signo '≈' y los obstaculos con el signo ' '.
        '''
        self.filas = filas
        self.columnas = columnas
        self.n_agua = 0
        self.n_obs = 0
        self.p_agua = p_agua
        self.p_obs = p_obs

        cols = self.columnas + 2
        fils = self.filas + 2

        self.mapa = [[' ' for _ in range(cols)] for _ in range(fils)]  # Crea el atributo mapa

        for j in range(cols):
            self.mapa[0][j] = '#'
            self.mapa[-1][j] = '#'

        for i in range(fils):
            self.mapa[i][0] = '#'
            self.mapa[i][-1] = '#'

        for i in range(1, fils - 1):
            for j in range(1, cols - 1):
                if self.mapa[i][j] == ' ':
                    rand_n = rd.random()
                    if rand_n < self.p_obs:
                        self.mapa[i][j] = ' '  # Obstáculo
                        self.n_obs += 1
                    else:
                        n = rd.randint(1, 6)
                        if n == 6:
                            rand_n = rd.random()
                            if rand_n < self.p_agua:
                                self.mapa[i][j] = '≈'  # Agua
                                self.n_agua += 1
                            else:
                                self.mapa[i][j] = '6'
                        else:
                            self.mapa[i][j] = str(n)  # Nivel de terreno

    def get_e(self, c, f):
        '''
        Devuelve el elemento dadas las coordenadas.
        '''
        return self.mapa[f][c]

    def imprimir(self):
        '''
        Imprime el mapa del terreno.
        '''
        print(f'Número de puntos de agua: {self.n_agua}')
        print(f'Número de puntos de obstáculo: {self.n_obs}')
        print()
        for i in range(len(self.mapa)):
            for j in range(len(self.mapa[0])):
                print(self.mapa[i][j], end="")
            print()

class Nave:
    def __init__(self, terreno, o="up"):
        self.orientacion = o
        self.terreno = terreno

        while (True):                          #Ciclo para impedir que el rover haga spawn sobre agua o un obstáculo
            c = rd.randint(1, self.terreno.columnas)
            f = rd.randint(1, self.terreno.filas)
            if self.terreno.mapa[f][c] != ' ' and '≈':
                break
        self.fila = f
        self.columna = c

    def profundidad(self):
        return int(self.terreno.mapa[self.fila][self.columna])

    def adelante_derecha_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila - 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila + 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila + 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila - 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna - 1]) - self.profundidad()) < 2
        return False

    def adelante_izquierda_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila - 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila - 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila + 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila + 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna - 1]) - self.profundidad()) < 2
        return False

    def atras_derecha_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila + 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila + 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila - 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila - 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna + 1]) - self.profundidad()) < 2
        return False

    def atras_izquierda_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila + 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila - 1][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila - 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila + 1][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna + 1]) - self.profundidad()) < 2
        return False

    def adelante_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila - 1][self.columna].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila][self.columna + 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila + 1][self.columna].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila][self.columna - 1]) - self.profundidad()) < 2
        return False

    def atras_b(self):
        if self.orientacion == "up" and self.terreno.mapa[self.fila + 1][self.columna].isdigit():
            return abs(int(self.terreno.mapa[self.fila + 1][self.columna]) - self.profundidad()) < 2
        if self.orientacion == "right" and self.terreno.mapa[self.fila][self.columna - 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila][self.columna - 1]) - self.profundidad()) < 2
        if self.orientacion == "down" and self.terreno.mapa[self.fila - 1][self.columna].isdigit():
            return abs(int(self.terreno.mapa[self.fila - 1][self.columna]) - self.profundidad()) < 2
        if self.orientacion == "left" and self.terreno.mapa[self.fila][self.columna + 1].isdigit():
            return abs(int(self.terreno.mapa[self.fila][self.columna + 1]) - self.profundidad()) < 2
        return False

    def adelante_derecha(self):
        if self.orientacion == "up":
            self.fila -= 1
            self.columna += 1
            self.orientacion = "right"
        elif self.orientacion == "right":
            self.fila += 1
            self.columna += 1
            self.orientacion = "down"
        elif self.orientacion == "down":
            self.fila += 1
            self.columna -= 1
            self.orientacion = "left"
        elif self.orientacion == "left":
            self.fila -= 1
            self.columna -= 1
            self.orientacion = "up"

    def adelante_izquierda(self):
        if self.orientacion == "up":
            self.fila -= 1
            self.columna -= 1
            self.orientacion = "left"
        elif self.orientacion == "right":
            self.fila -= 1
            self.columna += 1
            self.orientacion = "up"
        elif self.orientacion == "down":
            self.fila += 1
            self.columna += 1
            self.orientacion = "right"
        elif self.orientacion == "left":
            self.fila += 1
            self.columna -= 1
            self.orientacion = "down"

    def atras_derecha(self):
        if self.orientacion == "up":
            self.fila += 1
            self.columna += 1
            self.orientacion = "left"
        elif self.orientacion == "right":
            self.fila += 1
            self.columna -= 1
            self.orientacion = "up"
        elif self.orientacion == "down":
            self.fila -= 1
            self.columna -= 1
            self.orientacion = "right"
        elif self.orientacion == "left":
            self.fila -= 1
            self.columna += 1
            self.orientacion = "down"

    def atras_izquierda(self):
        if self.orientacion == "up":
            self.fila += 1
            self.columna -= 1
            self.orientacion = "right"
        elif self.orientacion == "right":
            self.fila -= 1
            self.columna -= 1
            self.orientacion = "down"
        elif self.orientacion == "down":
            self.fila -= 1
            self.columna += 1
            self.orientacion = "left"
        elif self.orientacion == "left":
            self.fila += 1
            self.columna += 1
            self.orientacion = "up"

    def adelante(self):
        if self.orientacion == "up":
            self.fila -= 1
        elif self.orientacion == "right":
            self.columna += 1
        elif self.orientacion == "down":
            self.fila += 1
        elif self.orientacion == "left":
            self.columna -= 1

    def atras(self):
        if self.orientacion == "up":
            self.fila += 1
        elif self.orientacion == "right":
            self.columna -= 1
        elif self.orientacion == "down":
            self.fila -= 1
        elif self.orientacion == "left":
            self.columna += 1

    def imprimir(self, clean=False):
        if clean:
            m = Terreno(self.terreno.columnas, self.terreno.filas, 0, 1)
            m.mapa[self.fila][self.columna] = 'N'
            m.imprimir()
        else:
            t = copy.deepcopy(self.terreno)
            t.mapa[self.fila][self.columna] = 'N'
            t.imprimir()

t = Terreno(30, 15, 0.25, 0.25)

t.imprimir()

rover = Nave(t)

rover.imprimir(clean=True)

rover.adelante_derecha()
rover.imprimir(clean=True)